import { AxiosError } from "axios";
import { FormEvent, useState } from "react";
import { Button, Form } from "react-bootstrap";
import Swal from "sweetalert2";
import { Vulnerability } from "../../../../interfaces/interfaces";
import { postVulnerability } from "../../../../utils/api";
import "./InsertForm.css";

interface InsertFormProps {
  visible?: boolean;
  onHiding?: () => void;
}

function InsertForm({ visible = false, onHiding = () => {} }: InsertFormProps) {
  const [validated, setValidated] = useState<boolean>(false);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    const form = event.currentTarget;

    if (form.checkValidity() === false) {
      event.preventDefault();
      event.stopPropagation();
    } else {
      event.preventDefault();
      const formData = new FormData(form);
      const formDataObj = Object.fromEntries(
        formData.entries()
      ) as unknown as Vulnerability;
      await createVulnerability(formDataObj);
    }

    setValidated(true);
  };

  const createVulnerability = async (vulnerability: Vulnerability) => {
    let parsedVulnerability = sanitizeNullValues(vulnerability);
    let res = await postVulnerability(parsedVulnerability);

    if (res.status == 201) handleSuccess();
    else handleError(res as AxiosError);
  };

  const sanitizeNullValues = (vulnerability: Vulnerability): Vulnerability => {
    let parsedVulnerability = { ...vulnerability };

    for (let key in vulnerability) {
      if (vulnerability[key as keyof Vulnerability] === "")
        parsedVulnerability = { ...parsedVulnerability, [key]: null };
    }

    return parsedVulnerability;
  };

  const handleSuccess = () => {
    Swal.fire({
      title: "Dados registrados",
      text: "A vulnerabilidade foi salva com sucesso!",
      icon: "success",
      confirmButtonColor: "#2bcc23",
    });

    hide();
  };

  const handleError = (res: AxiosError) => {
    console.error(res);
    let title = "";
    let text = "";

    if (res.request.status === 400) {
      title = "Formato Incorreto";
      text = "Os dados inseridos para a vulnerabilidade são inválidos.";
    } else {
      title = "Erro Interno";
      text =
        "Houve um erro na comunicação com o servidor. Por favor contate um administrador do sistema.";
    }

    Swal.fire({
      title: title,
      text: text,
      icon: "error",
      confirmButtonColor: "#9c2219",
    });
  };

  const hide = () => {
    setValidated(false);
    onHiding();
  };

  return (
    <>
      {visible && (
        <Form
          noValidate
          validated={validated}
          className="insert-form"
          onSubmit={handleSubmit}
        >
          <Form.Group className="mb-3">
            <Form.Control
              required
              name="asset_hostname"
              placeholder="Nome do HOST"
            />
            <Form.Control.Feedback type="invalid">
              Por favor preenchar o nome do HOST.
            </Form.Control.Feedback>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Control
              required
              name="asset_ip_address"
              placeholder="Endereço IP"
            />
            <Form.Control.Feedback type="invalid">
              Por favor indique o endereço IP do HOST.
            </Form.Control.Feedback>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Control required name="title" placeholder="Título" />
            <Form.Control.Feedback type="invalid">
              Por favor indique o título da vulnerabilidade.
            </Form.Control.Feedback>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Control required as="select" type="select" name="severity">
              <option value="">Nível de severidade</option>
              <option value="Crítico">Crítico</option>
              <option value="Alto">Alto</option>
              <option value="Médio">Médio</option>
              <option value="Baixo">Baixo</option>
            </Form.Control>
            <Form.Control.Feedback type="invalid">
              Por favor indique o nível de severidade da vulnerabilidade.
            </Form.Control.Feedback>
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Control
              name="cvss"
              type="number"
              step="0.1"
              placeholder="CVSS"
            />
          </Form.Group>
          <Form.Group className="mb-3">
            <Form.Control
              name="publication_date"
              placeholder="Data de Publicação"
              type="date"
            />
          </Form.Group>
          <Form.Group className="form-checkbox mb-3">
            <Form.Label>Resolvida</Form.Label>
            <Form.Check name="fixed" value="true" />
          </Form.Group>

          <Button variant="success" type="submit">
            Registrar
          </Button>
          <Button onClick={hide} variant="outline-secondary">
            Voltar
          </Button>
        </Form>
      )}
    </>
  );
}

export default InsertForm;
